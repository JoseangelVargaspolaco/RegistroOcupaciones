@page "/pago"
@page "/pago/{PagoId:int}"

@inject PagosBLL pagoBLL
@inject PersonasBLL personasBLL
@inject PrestamosBLL prestamosBLL
@inject NotificationService notifierSvc

<EditForm Model="pagos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="d-block p-2 bg-info text-white border border-4">
        <div class="card-header text-center">
            <h3>Registro de Pago</h3>
        </div>

        <div class="border border-4 card bg-primary text-white card-body">
            <div class="container overflow-hidden">
                <form class="row gy-3">

                    @*PagoId*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <label class="form-label">PagoId</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="pagos.PagoId" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="input-group-text btn btn-primary" @onclick="Buscar"> <i
                                            class="oi oi-magnifying-glass" /></button>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Fecha*@
                    <div class="col-md-2">
                        <label class="form-label">Fecha</label>
                        <InputDate @bind-Value="pagos.Fecha" class="form-control" />
                        <ValidationMessage For="@(() => pagos.Fecha)" />
                    </div>

                    @*PersonaId*@
                    <div class="col-md-5">
                        <label class="form-label">PersonaId</label>
                        <InputSelect class="form-select" @bind-Value="pagos.PersonaId">
                            <option value="0" disabled> Seleccione un nombre registrado </option>
                            @foreach (var personas in ListaPersonas)
                            {
                                <option value="@personas.PersonaId">@personas.Nombres</option>
                            }
                        </InputSelect>
                    </div>

                    @*Concepto*@
                    <div class="col-md-3">
                        <label class="form-label">Concepto</label>
                        <InputText @bind-Value="pagos.Concepto" class="form-control" />
                        <ValidationMessage For="@(() => pagos.Concepto)" />
                    </div>

                    @*Monto*@
                    <div class="col-md-2">
                        <label class="form-label">Monto</label>
                        <InputNumber @bind-Value="pagos.Monto" class="form-control" />
                        <ValidationMessage For="@(() => pagos.Monto)" />
                    </div>
                </form>
            </div>
        </div>

        @*-------------------------------------------------------------------------------------------------------*@
        @*-------------------------------------------------------------------------------------------------------*@

        <div class="border border-4 card bg-primary text-white card-body">
            <div class="container overflow-hidden">

                <div class="row">
                    @*PrestamoId *@
                    <div class="col-2">
                        <label>PrestamoId:</label>
                        <InputSelect class="form-select" @bind-Value="detalle.PrestamoId">
                            <option disabled selected> [Seleccione] </option>
                            @foreach (Prestamos prestamo in ListaPrestamos)
                            {
                                <option value="@prestamo.PrestamoId">@prestamo.PrestamoId @prestamo.Concepto
                                    @prestamo.Balance</option>
                            }
                        </InputSelect>
                    </div>

                    @*ValorPagado *@
                    <div class="col-2">
                        <label>Valor Pagado</label>
                        <InputNumber class="form-control" @bind-Value="detalle.ValorPagado"></InputNumber>
                        <ValidationMessage For="@(() => detalle.ValorPagado)"></ValidationMessage>
                    </div>

                    @*Boton agregar *@
                    <div class="col-2">
                        <br>
                        <button type="button" class="btn btn-primary input-group-text" @onclick="AgregarDetalle">
                            <span class="oi oi-plus">Agregar</span>
                        </button>
                    </div>

                </div>

                @*Tabla de detalles*@
                <hr />
                <table class="table table-bordered table-light">
                    <thead class="thead">
                        <tr class="table">
                            <th>PrestamoId</th>
                            <th>Valor Pagado</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in pagos.PagosDetalles)
                        {
                            <tr>
                                <td>@detalle.PrestamoId</td>
                                <td>@detalle.ValorPagado</td>
                                @* <td> <button @onclick="@(() => pagos.PagosDetalles.Remove(detalle) )"><i
                                        class="oi oi-trash" /> Eliminar</button> </td> *@
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="row justify-content-between">
                    <div class="col-md-4">
                        <label>Monto Total</label>
                        <div class="input-group mb-3">
                            <span class="form-control">@pagos.Monto</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-footer d-flex justify-content-center">
                <div class="border border-3 btn-group" role="group">
                    <button type="submit" class="btn btn-primary"> <i class="oi oi-document" /> Guardar</button>
                    <button type="submit" class="btn btn-success"> <i class="oi oi-pencil" /> Editar</button>
                    <button type="button" class="btn btn-danger" @onclick="Eliminar"><i class="oi oi-trash" />
                        Eliminar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {

    /*-------------------------------------------------------------------------------*/
    [Parameter]
    public int PagoId { get; set; }
    public Pagos pagos { get; set; } = new Pagos();
    public  Personas personas { get; set; } = new Personas();
    public  Prestamos prestamos { get; set; } = new Prestamos();
    public List<Personas> ListaPersonas { get; set; } = new List<Personas>();
    public List<Prestamos> ListaPrestamos { get; set; } = new List<Prestamos>();
    public PagosDetalles detalle { get; set; } = new PagosDetalles();

    protected override async Task OnInitializedAsync()
    {

        ListaPersonas = await personasBLL.GetPersonas(p => true);
        if (PagoId > 0)
        {
            this.pagos.PagoId = PagoId;
            await this.Buscar();
        }
    }

    private async Task Buscar()
    {
        if (pagos.PagoId > 0)
        {
            var encontrado = await pagoBLL.Buscar(pagos.PagoId);

            if (encontrado != null)
                this.pagos = encontrado;

        }
    }

    public async Task Cargar()
    {
        ListaPrestamos = await prestamosBLL.GetPrestamos(p => p.PersonaId == pagos.PersonaId && p.Balance > 0);
    }

    public void AgregarDetalle()
    {
        pagos.PagosDetalles.Add(detalle);
        detalle = new PagosDetalles();

        pagos.Monto = pagos.PagosDetalles.Sum(d => d.ValorPagado);
    }


    public void Nuevo()
    {
        pagos = new Pagos();
        pagos.Fecha = DateTime.Now;

    }

    public async Task Guardar()
    {
        pagos.Fecha = DateTime.Now;
        pagos.PersonaId = personas.PersonaId;
        pagos.Monto = prestamos.Monto;
        pagos.Concepto = prestamos.Concepto;

        pagos.PagosDetalles.Add(new PagosDetalles { PrestamoId = prestamos.PrestamoId, ValorPagado = detalle.ValorPagado});

        pagos.PagosDetalles.Add(new PagosDetalles { PrestamoId = prestamos.PrestamoId, ValorPagado = detalle.ValorPagado});

        await pagoBLL.Guardar(pagos);

    }

    public async void Eliminar()
    {
        bool elimino = await pagoBLL.Eliminar(pagos);

        if (elimino)
        {
            notifierSvc.ShowNotification("Eliminado correctamente");
            Nuevo();
        }
    }
}
