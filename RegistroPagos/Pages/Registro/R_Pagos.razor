@page "/pagos"
@page "/pagos/{PagoId:int}"

@inject PagosBLL pagosBLL
@inject PersonasBLL personasBLL
@inject NotificationService notifierSvc

<EditForm Model="pagos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="d-block p-2 bg-info text-white border border-4">
        <div class="card-header text-center">
            <h3>Registro de Pagos</h3>
        </div>

        <div class="border border-4 card bg-primary text-white card-body">
            <div class="container overflow-hidden">
                <form class="row gy-3">

                    @*PagoId*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <label class="form-label">PagoId</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="pagos.PagoId" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="input-group-text btn btn-primary" @onclick="Buscar"> <i
                                            class="oi oi-magnifying-glass" /></button>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Fecha*@
                    <div class="col-md-2">
                        <label class="form-label">Fecha</label>
                        <InputDate @bind-Value="pagos.Fecha" class="form-control" />
                        <ValidationMessage For="@(() => pagos.Fecha)" />
                    </div>

                    @*PersonaId*@
                    <div class="col-md-5">
                        <label class="form-label">PersonaId</label>
                        <InputSelect class="form-select" @bind-Value="pagos.PersonaId">
                            <option value="0" disabled> Seleccione un nombre registrado </option>
                            @foreach (var personas in ListPersonas)
                            {
                                <option value="@personas.PersonaId">@personas.Nombres</option>
                            }
                        </InputSelect>
                    </div>

                    @*Concepto*@
                    <div class="col-md-3">
                        <label class="form-label">Concepto</label>
                        <InputText @bind-Value="pagos.Concepto" class="form-control" />
                        <ValidationMessage For="@(() => pagos.Concepto)" />
                    </div>

                    @*Monto*@
                    <div class="col-md-2">
                        <label class="form-label">Monto</label>
                        <InputNumber @bind-Value="pagos.Monto" class="form-control" />
                        <ValidationMessage For="@(() => pagos.Monto)" />
                    </div>
                </form>
            </div>
        </div>

        <div class="card-footer d-flex justify-content-center">
            <div class="border border-3 btn-group" role="group">
                <button type="submit" class="btn btn-primary"> <i class="oi oi-document" /> Guardar</button>
                <button type="submit" class="btn btn-success"> <i class="oi oi-pencil" /> Editar</button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><i class="oi oi-trash" /> Eliminar</button>
            </div>
        </div>
        
    @*-------------------------------------------------------------------------------------------------------*@
    @*-------------------------------------------------------------------------------------------------------*@

        <div class="card-header text-center">
            <h3>Detalle de Pagos</h3>
        </div>

        <div class="border border-4 card bg-primary text-white card-body">
            <div class="container overflow-hidden">
                <form class="row gy-3">

                    @*PrestamoId*@
                    <div class="col-md-6">
                        <label class="form-label">PrestamoId</label>
                        <InputSelect class="form-select" @bind-Value="prestamos.PrestamoId">
                            <option value="0" disabled class="text-center"> Seleccione </option>
                            @foreach (var prestamos in ListPrestamos)
                            {
                                <option value="@prestamos.PrestamoId">@prestamos.PrestamoId</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="card-footer d-flex justify-content-center">
                        <div class="border border-3 btn-group" role="group">
                            <button type="button" class="btn btn-primary" @onclick="GuardarDetalle"> <i class="oi oi-document" /> Guardar</button>
                        </div>
                    </div>

                    @*Tabla Detalle*@
                    <table class="text-center table table text-white">
                        <thead class="thead">
                            <tr class="table-white border border-4">
                                <th>Id</th>
                                <th>PrestamoId</th>
                                <th>ValorPagado</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var pagosD in pagos.Detalle)
                            {
                                <tr>
                                    <td>@pagosD.PagoId</td>
                                    <td>@pagosD.PrestamoId</td>
                                    <td>@pagosD.ValorPagado</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </form>
            </div>
        </div>
    </div>
</EditForm>


@code {

/*-------------------------------------------------------------------------------*/
    [Parameter]
    public int PagoId { get; set; }
    public int PrestamoId { get; set; }
    public double ValorPagado { get; set; }
    public Personas personas { get; set; } = new Personas();
     public Prestamos prestamos { get; set; } = new Prestamos();
    public Pagos pagos { get; set; } = new Pagos();
    public List<Prestamos> ListPrestamos { get; set; } = new List<Prestamos>();
    public List<Personas> ListPersonas { get; set; } = new List<Personas>();

/*----------------------------------------------------------------------------------------------*/
    protected async override Task OnInitializedAsync()
    {

        if (PagoId > 0)
        {
            this.pagos.PagoId = PagoId;
            await this.Buscar();
        }
    }

    private async Task Buscar()
    {
        if (pagos.PagoId > 0)
        {
            var encontrado = await pagosBLL.Buscar(pagos.PagoId);
            if (encontrado != null)
            {
                this.pagos = encontrado;
                notifierSvc.ShowNotification("Registro encontrado", NotificationSeverity.Success);
            }
            else
            {
                notifierSvc.ShowNotification("Registro no encontrado", NotificationSeverity.Warning);
            }
        }
    }

    public void Nuevo()
    {
        pagos = new Pagos();
        notifierSvc.ShowNotification("Nueva plantilla creada correctamente.", NotificationSeverity.Success);
    }

    public async Task GuardarDetalle()
    {
        pagos.Fecha = DateTime.Now;
        pagos.PersonaId = 1;
        pagos.Monto = 100;
        pagos.Concepto = "prestamo carro";

        pagos.Detalle.Add(new PagosDetalles { PrestamoId = 1, ValorPagado = 100 });

        pagos.Detalle.Add(new PagosDetalles { PrestamoId = 2, ValorPagado = 200 });

        await pagosBLL.Guardar(pagos);

        
    }

    public async Task Guardar()
    {
        var guardo = await pagosBLL.Guardar(pagos);

        if (guardo)
        {
            Nuevo();
            notifierSvc.ShowNotification("Fue guardado correctamente.");
        }
        else
        {
            notifierSvc.ShowNotification("No fue guardado, intentar nuevamente.", NotificationSeverity.Error);
        }
    }

    public async Task Editar()
    {
        var editar = await pagosBLL.Editar(pagos);

        if (editar)
        {
            Nuevo();
            notifierSvc.ShowNotification("Fue editado correctamente.");
        }
        else
        {
            notifierSvc.ShowNotification("No fue editado, intentar nuevamente.", NotificationSeverity.Error);
        }
    }

    public async Task Eliminar()
    {
        var elimino = await pagosBLL.Eliminar(pagos);
        if (elimino)
        {
            Nuevo();
            notifierSvc.ShowNotification("Fue eliminado correctamente.");
        }
        else
        {
            notifierSvc.ShowNotification("No fue eliminado, intentar nuevamente.", NotificationSeverity.Error);
        }
    }
}